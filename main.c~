#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <signal.h>

#define MAX_LINE 80 /* 80 chars per line, per command, should be enough. */
#define BUFFER_SIZE 50

static char buffer[BUFFER_SIZE];

/**
 * setup() reads in the next command line, separating it into distinct tokens
 * using whitespace as delimiters. setup() sets the args parameter as a
 * null-terminated string.
 */
 void handle_SIGTSTP() {
      write(STDOUT_FILENO,buffer,strlen(buffer));
      exit(0);
}

int setup(char inputBuffer[], char *args[],int *background)
{
    int length, /* # of characters in the command line */
        i,      /* loop index for accessing inputBuffer array */
        start,  /* index where beginning of next command parameter is */
        ct;     /* index of where to place the next parameter into args[] */

    ct = 0;

    /* read what the user enters on the command line */
    length = read(STDIN_FILENO, inputBuffer, MAX_LINE);
    start = -1;
    if (length == 0)
        exit(0);            /* ^d was entered, end of user command stream */
    if (length < 0){
        perror("error reading the command");
        exit(-1);           /* terminate with error code of -1 */
    }

    /* examine every character in the inputBuffer */
    for (i=0;i<length;i++) {
        switch (inputBuffer[i]){
          case ' ':
          case '\t' :               /* argument separators */
            if(start != -1){
                    args[ct] = &inputBuffer[start];    /* set up pointer */
                ct++;
            }
            inputBuffer[i] = '\0'; /* add a null char; make a C string */
            start = -1;
            break;
          case '\n':                 /* should be the final char examined */
            if (start != -1){
                    args[ct] = &inputBuffer[start];
                ct++;
            }
                inputBuffer[i] = '\0';
                args[ct] = NULL; /* no more arguments to this command */
            break;
          default :             /* some other character */
            if (start == -1)
                start = i;
            if (inputBuffer[i] == '&'){
                *background  = 1;
                start = -1;
                inputBuffer[i] = '\0';
            }
          }
     }
     args[ct] = NULL; /* just in case the input line was > 80 */
     return ct;
}


int main(void)
{
    char inputBuffer[MAX_LINE];      /* buffer to hold the command entered */
    int background,pid,i,j,length;      /* background equals 1 if a command is followed by '&' */
    int status,prompt;
    char *history[50];
    char *args[(MAX_LINE/2)+1];  /* command line (of 80) has max of 40 arguments */
    char *argsarray = (char*)malloc(40*sizeof(char));           /* stores a copy of args[]*/
    char command[80];
    printf("Welcome to GWShell. My pid is %d\n", getpid());
    prompt = 0;

    struct sigaction handler;
      handler.sa_handler = handle_SIGTSTP;
      handler.sa_flags = SA_RESTART;
      sigaction(SIGTSTP, &handler, NULL);

      strcpy(buffer,"Caught <ctrl><z>\n");

    while (1){            /* Program terminates normally inside setup */
       prompt+=1;
       background = 0;
       printf("GWSHELL[%d]->\n",prompt);
       length = setup(inputBuffer,args,&background);       /* get next command */
       if (strcmp(args[0],"whisper") == 0)
       {
            for (i=1; i<length; i++)
           {
               strcpy(argsarray,args[i]);
               for (j=0;j<strlen(argsarray);j++){
                argsarray[j]=tolower(argsarray[j]);
               }
               printf("%s ",argsarray);
           }
           printf("\n");
       }else if (strcmp(args[0],"exit") == 0)
       {
           sprintf(argsarray,"%d",getpid());
           strcpy(command,"ps -o pid,ppid,pcpu,pmem,etime,user,command -p ");
           strcat(command,argsarray);
           system(command);
           exit(0);
       }else if (strcmp(args [0],"r") == 0)
       {
           printf("r\n");
       }else {
            pid = fork();
            if (pid < 0){
                printf("Fork Failed");
                return 1;
            }
            if (pid == 0){
                execvp(args[0],args);
            }
            if ((pid > 0) && (background == 0)){
                waitpid(pid,&status,0);
            }
        }

       }

      /* the steps are:
       (0) if built-in command, handle internally
       (1) if not, fork a child process using fork()
       (2) the child process will invoke execvp()
       (3) if background == 0, the parent will wait,
            otherwise returns to the setup() function. */
}
